require('dotenv').config()
import { networks } from '../config'
import { littleEndianToDesimal, parseAsset } from '../utils'
import { fetchAllRows } from '../utils/eosjs'
import { JsonRpc } from '../assets/libs/eosjs-jsonrpc'
import fetch from 'cross-fetch'

function getFailOverAlcorOnlyRpc(network) {
  const nodes = [network.protocol + '://' + network.host + ':' + network.port]
    .concat(Object.keys(network.client_nodes))
    .filter(n => n.includes('alcor'))

  const rpc = new JsonRpc(nodes.length > 0 ? nodes : [network.protocol + '://' + network.host + ':' + network.port], { fetch })
  return rpc
}

async function getMarkets(chain) {
  const network = networks[chain]
  const rpc = getFailOverAlcorOnlyRpc(network)

  console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ç—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞...')

  const rows = await fetchAllRows(rpc, {
    code: network.contract,
    scope: network.contract,
    table: 'markets',
  })

  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} –º–∞—Ä–∫–µ—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞\n`)

  return rows
}

async function getOrders({ chain, market_id, side }) {
  const network = networks[chain]
  const rpc = getFailOverAlcorOnlyRpc(network)

  const rows = await fetchAllRows(rpc, {
    code: network.contract,
    scope: market_id,
    table: `${side}order`
  })

  return rows.map((b) => {
    b.ask = parseAsset(b.ask)
    b.bid = parseAsset(b.bid)
    b.unit_price = littleEndianToDesimal(b.unit_price)

    return b
  })
}

// –§–æ—Ä–º–∏—Ä—É–µ–º token ID –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —Å–∏–º–≤–æ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "symbol-contract"
function getTokenId(contract, symbolName) {
  return `${symbolName.toLowerCase()}-${contract}`
}

// –ü–∞—Ä—Å–∏–º sym —Ñ–æ—Ä–º–∞—Ç–∞ "precision,SYMBOL" -> { symbol: "SYMBOL", precision: number }
function parseSym(sym) {
  const [precisionStr, symbol] = sym.split(',')
  return {
    symbol,
    precision: parseInt(precisionStr)
  }
}

function parseMarket(raw) {
  // –ü–∞—Ä—Å–∏–º base —Ç–æ–∫–µ–Ω –∏–∑ sym
  const baseSymbol = parseSym(raw.base_token.sym)
  const baseTokenId = getTokenId(raw.base_token.contract, baseSymbol.symbol)

  // –ü–∞—Ä—Å–∏–º quote —Ç–æ–∫–µ–Ω –∏–∑ sym
  const quoteSymbol = parseSym(raw.quote_token.sym)
  const quoteTokenId = getTokenId(raw.quote_token.contract, quoteSymbol.symbol)

  return {
    id: raw.id,
    base_token: {
      id: baseTokenId,
      contract: raw.base_token.contract,
      symbol: {
        name: baseSymbol.symbol,
        precision: baseSymbol.precision
      }
    },
    quote_token: {
      id: quoteTokenId,
      contract: raw.quote_token.contract,
      symbol: {
        name: quoteSymbol.symbol,
        precision: quoteSymbol.precision
      }
    }
  }
}

async function calculateMarketLockedToken(market, tokenId, tokenSymbol, chain, holdersMap) {
  const isTokenBase = market.base_token.id === tokenId

  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
  // Token = BASE ‚Üí buyorder (–≤ BID –±—É–¥–µ—Ç —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω)
  // Token = QUOTE ‚Üí sellorder (–≤ BID –±—É–¥–µ—Ç —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω)
  const side = isTokenBase ? 'buy' : 'sell'

  console.log(`  –¢–æ–∫–µ–Ω –ø–æ–∑–∏—Ü–∏—è: ${isTokenBase ? 'BASE' : 'QUOTE'}`)
  console.log(`  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: ${side}order`)

  const orders = await getOrders({ chain, market_id: market.id, side })

  console.log(`  –ù–∞–π–¥–µ–Ω–æ ${orders.length} ${side} –æ—Ä–¥–µ—Ä–æ–≤`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä —á—Ç–æ –≤ BID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à —Ç–æ–∫–µ–Ω
  if (orders.length > 0) {
    const firstOrder = orders[0]
    if (firstOrder.bid.symbol.symbol !== tokenSymbol) {
      console.log(`  ‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –í BID –Ω–µ ${tokenSymbol}, –∞ ${firstOrder.bid.symbol.symbol}!`)
      return { amount: 0, precision: 0 }
    }

    // –ü–æ–ª—É—á–∞–µ–º precision –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    const precision = firstOrder.bid.symbol.precision

    // –°—É–º–º–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ BID –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º
    let totalAmount = 0
    orders.forEach(order => {
      totalAmount += order.bid.amount

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º
      if (!holdersMap[order.account]) {
        holdersMap[order.account] = 0
      }
      holdersMap[order.account] += order.bid.amount
    })

    const divisor = Math.pow(10, precision)
    const formatted = (totalAmount / divisor).toLocaleString('en-US', { maximumFractionDigits: precision })
    console.log(`  üí∞ –ó–∞–ª–æ—á–µ–Ω–æ ${tokenSymbol} (ID: ${market.id}): ${formatted} ${tokenSymbol} (raw: ${totalAmount})`)

    return { amount: totalAmount, precision }
  }

  return { amount: 0, precision: 0 }
}

async function main() {
  const args = process.argv.slice(2)

  if (args.length < 2) {
    console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx tools/calculate-token-locked.ts <chain> <token_id>')
    console.error('   –ü—Ä–∏–º–µ—Ä: npx tsx tools/calculate-token-locked.ts proton xpr-eosio.token')
    process.exit(1)
  }

  const [chain, tokenIdInput] = args

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º token ID –≤ lowercase
  const tokenId = tokenIdInput.toLowerCase()

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!networks[chain]) {
      console.error(`‚ùå –°–µ—Ç—å "${chain}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config`)
      process.exit(1)
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ç—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    const rawMarkets = await getMarkets(chain)

    // –ü–∞—Ä—Å–∏–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç—ã –ø–æ —Ç–æ–∫–µ–Ω—É
    const markets = rawMarkets
      .map(parseMarket)
      .filter(m => m.base_token.id === tokenId || m.quote_token.id === tokenId)

    if (markets.length === 0) {
      console.log(`\n‚ùå –ú–∞—Ä–∫–µ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º ${tokenId} –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ ${chain} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      return
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${markets.length} –º–∞—Ä–∫–µ—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º ${tokenId}\n`)

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞
    const firstMarket = markets[0]
    const isTokenBase = firstMarket.base_token.id === tokenId
    const tokenSymbol = isTokenBase
      ? firstMarket.base_token.symbol.name
      : firstMarket.quote_token.symbol.name
    const tokenPrecision = isTokenBase
      ? firstMarket.base_token.symbol.precision
      : firstMarket.quote_token.symbol.precision

    console.log(`–¢–æ–∫–µ–Ω: ${tokenSymbol}`)
    console.log(`Token ID: ${tokenId}`)
    console.log(`Precision: ${tokenPrecision}\n`)

    let grandTotal = 0
    let processedCount = 0
    const holdersMap = {}

    for (const market of markets) {
      console.log(`\n${'='.repeat(80)}`)
      console.log(`–ú–∞—Ä–∫–µ—Ç ID: ${market.id}`)
      console.log(`Base: ${market.base_token.symbol.name} (${market.base_token.id})`)
      console.log(`Quote: ${market.quote_token.symbol.name} (${market.quote_token.id})`)
      console.log('='.repeat(80))

      const result = await calculateMarketLockedToken(market, tokenId, tokenSymbol, chain, holdersMap)
      grandTotal += result.amount
      processedCount++

      const divisor = Math.pow(10, tokenPrecision)
      console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä–∫–µ—Ç–æ–≤: ${processedCount}/${markets.length}`)
      console.log(`üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ ${tokenSymbol}: ${(grandTotal / divisor).toLocaleString('en-US', { maximumFractionDigits: tokenPrecision })} ${tokenSymbol}`)
    }

    const divisor = Math.pow(10, tokenPrecision)
    console.log(`\n\n${'='.repeat(80)}`)
    console.log(`üìä –ò–¢–û–ì–û –ó–ê–õ–û–ß–ï–ù–û ${tokenSymbol} (${processedCount} –º–∞—Ä–∫–µ—Ç–æ–≤):`)
    console.log(`üí∞ ${(grandTotal / divisor).toLocaleString('en-US', { maximumFractionDigits: tokenPrecision })} ${tokenSymbol}`)
    console.log(`üìù Raw: ${grandTotal}`)
    console.log('='.repeat(80))

    // –¢–æ–ø 5 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
    const holders = Object.entries(holdersMap)
      .map(([account, amount]) => ({ account, amount }))
      .sort((a, b) => b.amount - a.amount)
      .slice(0, 5)

    if (holders.length > 0) {
      console.log(`\n\n${'='.repeat(80)}`)
      console.log(`üëë –¢–û–ü 5 –î–ï–†–ñ–ê–¢–ï–õ–ï–ô ${tokenSymbol} (–ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –≤ —Å—É–º–º–µ):`)
      console.log('='.repeat(80))

      holders.forEach((holder, index) => {
        const formatted = (holder.amount / divisor).toLocaleString('en-US', { maximumFractionDigits: tokenPrecision })
        const percentage = ((holder.amount / grandTotal) * 100).toFixed(2)
        console.log(`${index + 1}. ${holder.account}`)
        console.log(`   üí∞ ${formatted} ${tokenSymbol} (${percentage}%)`)
        console.log(`   üìù Raw: ${holder.amount}`)
      })
      console.log('='.repeat(80))
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

main()
